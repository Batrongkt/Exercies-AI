# -*- coding: utf-8 -*-
"""Pretrained models 21/04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_GIIlCITlkc-aEpd8gL_0V7xvdlzfwWs
"""

pip install mtcnn

from mtcnn import MTCNN
import matplotlib.pyplot as plt
filename = '/content/drive/MyDrive/anh-chup-doi-tuyen-bong-da-nu-viet-nam_031507280.jpg'
img=plt.imread(filename)
plt.imshow(img)

detector=MTCNN()
faces=detector.detect_faces(img)
for face in faces:
   print(face)

from mtcnn import MTCNN
import matplotlib.pyplot as plt
filename='/content/drive/MyDrive/anh-chup-doi-tuyen-bong-da-nu-viet-nam_031507280.jpg'
img=plt.imread(filename)
detector=MTCNN()
faces=detector.detect_faces(img)
plt.imshow(img)
ax=plt.gca()
for face in faces:
  x,y,width,height=face['box']
  rect=plt.Rectangle((x,y),width,height,fill=False,color='red')
  ax.add_patch(rect)
  for key,value in face['keypoints'].items():
    dot=plt.Circle(value,radius=2,color='red')
    ax.add_patch(dot)
  plt.savefig('/content/drive/MyDrive/Colab Notebooks')
plt.show()

from mtcnn import MTCNN
import matplotlib.pyplot as plt
def draw_faces(filename,result_list):
    data=plt.imread(filename)
    for i in range(len(result_list)):
      x1,y1,width,height=result_list[i]['box']
      x2,y2=x1+width,height
      plt.subplot(1,len(result_list),i+1)
      plt.axis('off')
      plt.imshow(data[y1:y2,x1:x2])
    plt.show()
    filename='/content/drive/MyDrive/Colab Notebooks/Pretrained models 21 04.ipynb'
    img=plt.imread(filename)
    detector=MTCNN()
    faces=detector.detect_faces(img)
    draw_face(filename,faces)

filename='/content/drive/MyDrive/Colab Notebooks/Pretrained models 21 04.ipynb'
img=plt.imread(filename)
detector=MTCNN()
faces=detector.detect_faces(img)
draw_face(filename,faces)

from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
import numpy as np

model = ResNet50(weights='imagenet')

img_path = '/content/drive/MyDrive/anh-con-ngua-1.png'
img = image.load_img(img_path, target_size=(224, 224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x)

preds = model.predict(x)
# decode the results into a list of tuples (class, description, probability)
# (one such list for each sample in the batch)
print('Predicted:', decode_predictions(preds, top=3)[0])

from keras.applications.vgg19 import VGG19
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
import numpy as np


model = VGG19(weights='imagenet')

img_path = '/content/drive/MyDrive/Yen_Bai_-_dogs_-_P1390010.JPG'
img = image.load_img(img_path, target_size=(224, 224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x)

preds = model.predict(x)
# decode the results into a list of tuples (class, description, probability)
# (one such list for each sample in the batch)
print('Predicted:', decode_predictions(preds, top=3)[0])

from keras.applications.vgg16 import VGG16
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
import numpy as np


model = VGG19(weights='imagenet')

img_path = '/content/drive/MyDrive/Yen_Bai_-_dogs_-_P1390010.JPG'
img = image.load_img(img_path, target_size=(224, 224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x)

preds = model.predict(x)
# decode the results into a list of tuples (class, description, probability)
# (one such list for each sample in the batch)
print('Predicted:', decode_predictions(preds, top=3)[0])